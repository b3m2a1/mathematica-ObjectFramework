(* ::Title:: *)
(*ObjectFramework`*)


(* ::Text::GrayLevel[0.5]:: *)
(* Autogenerated ObjectFramework loader file *)


BeginPackage["ObjectFramework`"];


(* ::Subsubsection::Closed:: *)
(*$ContextPath*)


$ContextPath=
	Join[$ContextPath,
		"ObjectFramework`"<>
			StringReplace[
				FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
				$PathnameSeparator->"`"
				]&/@
			Select[
				DirectoryQ@#&&
					StringMatchQ[
						StringReplace[
							FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
							$PathnameSeparator->"`"
							],
						("$"|WordCharacter)..
						]
				&]@
			FileNames["*",
				FileNameJoin@{
					DirectoryName@$InputFileName,
					"Packages"
					},
				Infinity
				]
		]


(* ::Section:: *)
(* Package Functions *)


Unprotect["`Private`Package`*"];
Begin["`Private`Package`"];


(* ::Subsection::Closed:: *)
(*Constants*)


$PackageDirectory=
	DirectoryName@$InputFileName;
$PackageName=
	"ObjectFramework";
$PackageListing=<||>;
$PackageContexts={
	"ObjectFramework`",
	$Context
	};
(* ::Subsection:: *)
(*Paths*)


(* ::Subsubsection::Closed:: *)
(*PackageFilePath*)


PackageFilePath[p__]:=
	FileNameJoin[Flatten@{
		$PackageDirectory,
		p
		}];


(* ::Subsubsection::Closed:: *)
(*PackageFEFile*)


PackageFEFile[p___,f_]:=
	FrontEnd`FileName[
		Evaluate@
		Flatten@{
			$PackageName,
			p
			},
		f
		];


(* ::Subsubsection::Closed:: *)
(*PackagePathSymbol*)


PackagePathSymbol[parts___String,sym_String]:=
	ToExpression[StringRiffle[{$PackageName,parts,sym},"`"],StandardForm,HoldPattern];
PackagePathSymbol[parts___String,sym_Symbol]:=
	PackagePathSymbol[parts,Evaluate@SymbolName@Unevaluated[sym]];
PackagePathSymbol~SetAttributes~HoldRest;
(* ::Subsection:: *)
(*Loading*)


(* ::Subsubsection::Closed:: *)
(*Constants*)


If[Not@AssociationQ@$PackageFileContexts,
	$PackageFileContexts=
		<||>
	];


If[Not@AssociationQ@$DeclaredPackages,
	$DeclaredPackages=
		<||>
	];


If[Not@ListQ@$LoadedPackages,
	$LoadedPackages={}
	];


(* ::Subsubsection::Closed:: *)
(*PackageFileContext*)


PackageFileContextPath[f_String?DirectoryQ]:=
	FileNameSplit[FileNameDrop[f],FileNameDepth[$PackageDirectory]+1];
PackageFileContextPath[f_String?FileExistsQ]:=
	PackageFileContextPath[DirectoryName@f];


PackageFileContext[f_String?DirectoryQ]:=
	With[{s=PackageFileContextPath[f]},
		StringRiffle[Append[""]@Prepend[s,ObjectFramework],"`"]
		];


(* ::Subsubsection::Closed:: *)
(*PackageExecute*)


PackageExecute[expr_]:=
	(
		BeginPackage["ObjectFramework`"];
		$ContextPath=
			DeleteDuplicates[Join[$ContextPath,$PackageContexts]];
		(EndPackage[];#)&@CheckAbort[expr,EndPackage[]]
		);
PackageExecute~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*PackagePullDeclarations*)


PackagePullDeclarations[pkgFile_]:=
	With[{f=OpenRead[pkgFile]},
		pkgFile->
		Cases[
			Reap[
				Do[
					Replace[ReadList[f,Hold[Expression],1],{
						{}->Return[EndOfFile],
						{Hold[_Begin|_BeginPackage|
							CompoundExpression[_Begin|_BeginPackage,___]]}:>
							Return[Begin],
						{e_}:>Sow[e]
						}],
					Infinity];
				Close@f;
				][[2,1]],
			s_Symbol?(
				Function[sym,
					Quiet[StringContainsQ[Context[sym],"ObjectFramework`"]],
					HoldFirst]):>
				HoldPattern[s],
			Infinity
			]
	];


(* ::Subsubsection::Closed:: *)
(*PackageLoadPackage*)


PackageLoadPackage[heldSym_,context_,pkgFile_->syms_]:=
	Block[{$loadingChain=
		If[ListQ@$loadingChain,$loadingChain,{}]
		},
		If[!MemberQ[$loadingChain,pkgFile],
			Replace[Thread[syms,HoldPattern],
				Verbatim[HoldPattern][{s__}]:>Clear[s]
				];
			If[Not@MemberQ[$ContextPath,context],
				$ContextPath=Prepend[$ContextPath,context];
				FrontEnd`Private`GetUpdatedSymbolContexts[]
				];
			PackageAppGet[context,pkgFile];
			Unprotect[$LoadedPackages];
			AppendTo[$LoadedPackages,pkgFile];
			Protect[$LoadedPackages];
			ReleaseHold[heldSym]
			]	
		];


(* ::Subsubsection::Closed:: *)
(*PackageDeclarePackage*)


PackageDeclarePackage[pkgFile_->syms_]:=
	With[{c=$Context},
		$DeclaredPackages[pkgFile]=syms;
		$PackageFileContexts[pkgFile]=c;
		Map[
			If[True,
				#:=PackageFEHiddenBlock[PackageLoadPackage[#,c,pkgFile->syms]]
				]&,
			syms
			]
		];


(* ::Subsubsection::Closed:: *)
(*PackageLoadDeclare*)


PackageLoadDeclare[pkgFile_String]:=
	If[!MemberQ[$LoadedPackages,pkgFile],
		PackageFEHiddenBlock[
			If[!KeyMemberQ[$DeclaredPackages,pkgFile],
				PackageDeclarePackage@PackagePullDeclarations[pkgFile](*,
				Replace[$DeclaredPackages[pkgFile],
					syms:{__}:>
						PackageLoadPackage[None,
							$PackageFileContexts[pkgFile],
							pkgFile->syms
							]
					]*)
				]
			],
		PackageAppGet[pkgFile]
		];


(* ::Subsubsection::Closed:: *)
(*PackageAppLoad*)


PackageAppLoad[dir_String?DirectoryQ]:=
	If[StringMatchQ[FileBaseName@dir,(WordCharacter|"$")..],
		Begin["`"<>FileBaseName[dir]<>"`"];
		AppendTo[$PackageContexts,$Context];
		PackageAppLoad[
			$PackageListing[FileNameDrop[dir,FileNameDepth[$PackageDirectory]+1]]=
				Select[
					FileNames["*",dir],
					DirectoryQ@#||MatchQ[FileExtension[#],"m"|"wl"]&
					]
			];
		End[];
		];
PackageAppLoad[file_String?FileExistsQ]:=
	PackageLoadDeclare[file];
PackageAppLoad[]:=
	PackageAppLoad[
		$PackageListing[$PackageName]=
			Select[
				FileNames["*",FileNameJoin@{$PackageDirectory,"Packages"}],
				DirectoryQ@#||MatchQ[FileExtension[#],"m"|"wl"]&
				]
			];
PackageAppLoad~SetAttributes~Listable;


(* ::Subsubsection::Closed:: *)
(*PackageAppGet*)


PackageAppGet[f_]:=
	PackageExecute[
		PackageFEHiddenBlock[
			If[FileExistsQ@f,
				Get@f,
				Get@PackageFilePath["Packages",f<>".m"]
				]
			]
		];
PackageAppGet[c_,f_]:=
	PackageExecute[
		Begin[c];
		(End[];#)&@
			PackageFEHiddenBlock[
				If[FileExistsQ@f,
					Get@f,
					Get@PackageFilePath["Packages",f<>".m"]
					]
				]
		];


(* ::Subsubsection::Closed:: *)
(*PackageAppNeeds*)


PackageAppNeeds[pkgFile_String?FileExistsQ]:=
	If[!MemberQ[$LoadedPackages,pkgFile],
		If[KeyMemberQ[$DeclaredPackages,pkgFile],
			PackageLoadDeclare[pkgFile],
			Do[PackageLoadDeclare[pkgFile],2]
			];
		];


PackageAppNeeds[pkg_String]:=
	If[FileExistsQ@PackageFilePath["Packages",pkg<>".m"],
		PackageAppNeeds[PackageFilePath["Packages",pkg<>".m"]],
		$Failed
		];
(* ::Subsection:: *)
(*Autocompletion*)


(* ::Subsubsection::Closed:: *)
(* $PackageAutoCompletionFormats *)


$PackageAutoCompletionFormats=
	Alternatives@@Join@@{
		Range[9],
		{{__String}},
		{
			"codingNoteFontCom",
			"ConvertersPath",
			"ExternalDataCharacterEncoding",
			"MenuListCellTags",
			"MenuListConvertFormatTypes",
			"MenuListDisplayAsFormatTypes",
			"MenuListFonts",
			"MenuListGlobalEvaluators",
			"MenuListHelpWindows",
			"MenuListNotebookEvaluators",
			"MenuListNotebooksMenu",
			"MenuListPackageWindows",
			"MenuListPalettesMenu",
			"MenuListPaletteWindows",
			"MenuListPlayerWindows",
			"MenuListPrintingStyleEnvironments",
			"MenuListQuitEvaluators",
			"MenuListScreenStyleEnvironments",
			"MenuListStartEvaluators",
			"MenuListStyleDefinitions",
			"MenuListStyles",
			"MenuListStylesheetWindows",
			"MenuListTextWindows",
			"MenuListWindows",
			"PrintingStyleEnvironment",
			"ScreenStyleEnvironment",
			"Style"
			}
		};


(* ::Subsubsection::Closed:: *)
(* PackageAddAutocompletions Basic*)


PackageAddAutocompletions[pats:{(_String->{$PackageAutoCompletionFormats..})..}]:=
	If[$Notebooks&&
		Internal`CachedSystemInformation["FrontEnd","VersionNumber"]>10.0,
		Scan[
			FE`Evaluate[FEPrivate`AddSpecialArgCompletion[#]]&,
			pats
			];
		pats,
		$Failed
		];
PackageAddAutocompletions[pat:(_String->{$PackageAutoCompletionFormats..})]:=
	PackageAddAutocompletions[{pat}];


(* ::Subsubsection::Closed:: *)
(* $autocompletionTable *)


$PackageAutocompletionTable={
	f:$PackageAutoCompletionFormats:>f,
	None|Normal|"Standard"->0,
	AbsoluteFileName|"AbsoluteFileName"->2,
	FileName->3,
	"Color"->4,
	Package|"Package"->7,
	Directory|"Directory"->8,
	Interpreter|"InterpreterType"->9,
	s_String:>{s}
	};


(* ::Subsubsection::Closed:: *)
(* PackageAddAutocompletions Formatted *)


PackageAddAutocompletions[o:{__Rule}]/;(!TrueQ@$PackageRecursionProtect):=
	Block[{$recursionProtect=True},
		Replace[
			PackageAddAutocompletions@
				Replace[o,
					(s_->v_):>
						(Replace[s,_Symbol:>SymbolName[s]]->
							Replace[
								Flatten[{v},1],
								$PackageAutocompletionTable,
								1
								]),
					1
					],
			_PackageAddAutocompletions->$Failed
			]
		];
PackageAddAutocompletions[s:Except[_List],v_]:=
	PackageAddAutocompletions[{s->v}];
PackageAddAutocompletions[l_,v_]:=
	PackageAddAutocompletions@
		Flatten@{
			Quiet@
				Check[
					Thread[l->v],
					Map[l->#&,v]
					]
			};


(* ::Subsubsection::Closed:: *)
(* PackageSetAutocompletionData *)


PackageSetAutocompletionData[]:=
	If[DirectoryQ@
			FileNameJoin@{
					$PackageDirectory,
					"Resources",
					"FunctionalFrequency"
					},
		CurrentValue[
		$FrontEndSession,
			{PrivatePaths,"AutoCompletionData"}
			]=
			DeleteDuplicates@
				Append[
					CurrentValue[
						$FrontEndSession,
						{PrivatePaths,"AutoCompletionData"}
						],
					FileNameJoin@{
						$PackageDirectory,
						"Resources",
						"FunctionalFrequency"
						}
					]
		];
(* ::Subsection:: *)
(*SyntaxInformation*)


(* ::Subsubsection::Closed:: *)
(*$PackageSyntaxInformationSet*)


If[!AssociationQ@$PackageSyntaxInformationSet,
	$PackageSyntaxInformationSet=<|
		
		|>
	];


(* ::Subsubsection::Closed:: *)
(*PackageGetSyntaxInformation*)


PackageGetSyntaxInformation[Except[HoldPattern][pats___]]:=
	ReplaceRepeated[HoldPattern[#],{
		Verbatim[Pattern][_,b_]:>b,
		_Optional:>(_.),
		Verbatim[PatternTest][p_,_]:>p,
		Verbatim[Blank][s_]:>_,
		Verbatim[BlankSequence][s_]:>__,
		Verbatim[BlankNullSequence][s_]:>___,
		Verbatim[OptionsPattern][s__]:>OptionsPattern[]
		}]&/@Hold[pats]//Thread[List@@#,HoldPattern]&//ReleaseHold;
PackageGetSyntaxInformation[Verbatim[HoldPattern][pat_]]:=
	PackageGetSyntaxInformation[pat];
PackageGetSyntaxInformation[Verbatim[HoldPattern][pats___]]:=
	PackageGetSyntaxInformation[Hold[pats]];
PackageGetSyntaxInformation[pat_Symbol]:=
	Replace[DownValues[pat],
		(Verbatim[HoldPattern][p_]:>_):>
			PackageGetSyntaxInformation[p],
		1
		];
PackageGetSyntaxInformation~SetAttributes~HoldFirst;


(* ::Subsubsection::Closed:: *)
(*PackageSetSyntaxInformation*)


PackageSetSyntaxInformation[Verbatim[HoldPattern][f_Symbol[pats___]],o___]:=
	PackageSetSyntaxInformation[f[pats],o];
PackageSetSyntaxInformation[f_Symbol[pats___],o___]:=
	If[!Lookup[$PackageSyntaxInformationSet,f,False],
		$PackageSyntaxInformationSet[f]=True;
		SyntaxInformation[f]={
			"ArgumentsPattern"->PackageGetSyntaxInformation[f[pats]],
			o
			};
		];
PackageSetSyntaxInformation~SetAttributes~HoldFirst;


PackageSetSyntaxInformation[f_Symbol,o___]:=
	If[!Lookup[$PackageSyntaxInformationSet,f,False],
		With[{d=
			First@
				MaximalBy[
					Length@Extract[#,1,Unevaluated]&
					]@
				MaximalBy[First/@DownValues[f],
					Length@Cases[#,_Optional|_Default|_OptionsPattern,\[Infinity]]&
					]},
			PackageSetSyntaxInformation[d,o]
			]
		];


(* ::Subsubsection::Closed:: *)
(*PackageClearSyntaxInformation*)


PackageClearSyntaxInformation[f_Symbol]:=
	(SyntaxInformation[f]=.;$PackageSyntaxInformationSet[f]=False;);
PackageClearSyntaxInformation[f_Symbol[pats___]]:=
	(SyntaxInformation[f]=.;$PackageSyntaxInformationSet[f]=False;);
(* ::Subsection:: *)
(*Usage*)


(* ::Subsubsection::Closed:: *)
(*PackageAddUsage*)


PackageAddUsage[sym_Symbol,usage_String]:=
	(sym::usages=
		StringTrim@StringRiffle[{
			StringReplace[
				Replace[sym::usages,
					Except[_String]->""
					],
				usage->""
				],
			usage},
			"\n"]);
PackageAddUsage[pat:Except[_Missing],usage_String]:=
	PackageAddUsage[
		Evaluate@FirstCase[Hold[pat],
			s_Symbol?(
				Function[Null,
				Context[#]==("ObjectFramework`"),
				HoldFirst]):>s,
			Missing["NotFound"],
			Infinity,
			Heads->True
			],
		ToString[Unevaluated[pat]]<>" "<>usage
		];
PackageAddUsage[pat:Except[_Missing],usage_]:=
	PackageAddUsage[pat,ToString[usage]];
PackageAddUsage~SetAttributes~HoldFirst;
(* ::Subsection:: *)
(*FrontEnd*)


(* ::Subsubsection::Closed:: *)
(*PackageFEInstallStylesheets *)


PackageFEInstallStylesheets[]:=
	With[{
		base=
			FileNameJoin@{
				$PackageDirectory,
				"FrontEnd",
				"StyleSheets",
				$PackageName
				},
		target=
			FileNameJoin@{
					$UserBaseDirectory,
					"SystemFiles",
					"FrontEnd",
					"StyleSheets",
					$PackageName}
		},
		If[DirectoryQ@base,
			Do[
				Quiet@
					CreateFile[
						FileNameJoin@{
							target,
							FileNameDrop[f,FileNameDepth[base]]
							},
						CreateIntermediateDirectories->True
						];
				CopyFile[f,
					FileNameJoin@{
						target,
						FileNameDrop[f,FileNameDepth[base]]
						},
					OverwriteTarget->True],
				{f,FileNames["*.nb",base,\[Infinity]]}
				]
			]
		];


(* ::Subsubsection::Closed:: *)
(*PackageFEInstallPalettes *)


PackageFEInstallPalettes[]:=
	With[{
		base=
			FileNameJoin@{
				$PackageDirectory,
				"FrontEnd",
				"Palettes",
				$PackageName
				},
		target=
			FileNameJoin@{
					$UserBaseDirectory,
					"SystemFiles",
					"FrontEnd",
					"Palettes",
					$PackageName}
		},
		If[DirectoryQ@base,
			Do[
				Quiet@
					CreateFile[
						FileNameJoin@{
							target,
							FileNameDrop[f,FileNameDepth[base]]
							},
						CreateIntermediateDirectories->True
						];
				CopyFile[f,
					FileNameJoin@{
						target,
						FileNameDrop[f,FileNameDepth[base]]
						},
					OverwriteTarget->True],
				{f,FileNames["*.nb",base,\[Infinity]]}
				]
			]
		];


(* ::Subsubsection::Closed:: *)
(*PackageFEHiddenBlock*)


PackageFEHiddenBlock[expr_]:=
	(
		Internal`SymbolList[False];
		(Internal`SymbolList[True];#)&@expr
		);
PackageFEHiddenBlock~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*PackageFEUnhideSymbols*)


PackageFEUnhideSymbols[syms__Symbol,
	cpath:{__String}|Automatic:Automatic,
	mode:"Update"|"Set":"Update"
	]:=
	With[{stuff=
		Map[
			Function[Null,
				{Context@#,SymbolName@Unevaluated@#},
				HoldAllComplete],
			HoldComplete[syms]
			]//Apply[List]
		},
		KeyValueMap[
			FrontEndExecute@
			If[mode==="Update",
				FrontEnd`UpdateKernelSymbolContexts,
				FrontEnd`SetKernelSymbolContexts
				][
				#,
				Replace[cpath,Automatic->$ContextPath],
				{{#,{},{},#2,{}}}
				]&,
			GroupBy[stuff,First->Last]
			];
		];
PackageFEUnhideSymbols[names_String,mode:"Update"|"Set":"Update"]:=
	Replace[
		Thread[ToExpression[Names@names,StandardForm,Hold],Hold],
		Hold[{s__}]:>PackageFEUnhideSymbols[s,mode]
		];
PackageFEUnhideSymbols~SetAttributes~HoldAllComplete;


(* ::Subsubsection::Closed:: *)
(*PackageFERehideSymbols*)


PackageFERehideSymbols[syms__Symbol,
	cpath:{__String}|Automatic:Automatic,
	mode:"Update"|"Set":"Update"]:=
	With[{stuff=
		Map[
			Function[Null,
				{Context@#,SymbolName@Unevaluated@#},
				HoldAllComplete],
			HoldComplete[syms]
			]//Apply[List]
		},
		KeyValueMap[
			FrontEndExecute@
			If[mode==="Update",
				FrontEnd`UpdateKernelSymbolContexts,
				FrontEnd`SetKernelSymbolContexts
				][
				#,
				Replace[cpath,
					Automatic->$ContextPath
					],
				{{#,{},#2,{},{}}}
				]&,
			GroupBy[stuff,First->Last]
			];
		];
PackageFERehideSymbols[names_String,mode:"Update"|"Set":"Update"]:=
	Replace[
		Thread[ToExpression[Names@names,StandardForm,Hold],Hold],
		Hold[{s__}]:>PackageFERehideSymbols[s,mode]
		];
PackageFERehideSymbols~SetAttributes~HoldAllComplete;


(* ::Subsubsection::Closed:: *)
(*PackageFEUnhidePackage*)


PackageFEUnhidePackage[package_String?FileExistsQ,a___]:=
	Replace[Thread[Lookup[$DeclaredPackages,package,{}],HoldPattern],
		Verbatim[HoldPattern][{syms__}]:>
			PackageFEUnhideSymbols[syms,a]
		];
PackageFEUnhidePackage[spec:_String|_List,a___]:=
	PackageFEUnhidePackage[PackageFilePath@Flatten@{"Packages",spec},a];


(* ::Subsubsection::Closed:: *)
(*PackageFERehidePackage*)


PackageFERehidePackage[package_String?FileExistsQ,a___]:=
	Replace[Thread[Lookup[$DeclaredPackages,package,{}],HoldPattern],
		Verbatim[HoldPattern][{syms__}]:>
			PackageFERehideSymbols[syms,a]
		];
PackageFERehidePackage[spec:_String|_List,a___]:=
	PackageFERehidePackage[PackageFilePath@Flatten@{"Packages",spec},a];
(* ::Subsection:: *)
(*Objects*)


(* ::Subsubsection::Closed:: *)
(*$PackageObjectBase*)


$PackageObjectBase=PackageFilePath["Objects"];


(* ::Subsubsection::Closed:: *)
(*PackageLocalObject*)


PackageLocalObject[name_]:=
	LocalObject[name,$PackageObjectBase];


(* ::Subsubsection::Closed:: *)
(*PackageLocalFile*)


PackageLocalFile[name_,path_]:=
	FileNameJoin@{
		$PackageObjectBase,
		name,
		path
		};


PackageLocalFile[name_]:=
	PackageLocalFile[
		name,
		Key["ExternalData"]@
			Get@PackageLocalFile["object.wl"]
		];


(* ::Subsubsection::Closed:: *)
(*PackageLocalPut*)


PackageLocalPut[expr__,name_]:=
	Put[
		Unevaluated@expr,
		PackageLocalObject[name]
		];


(* ::Subsubsection::Closed:: *)
(*PackageLocalExport*)


PackageLocalExport[name_,e__]:=
	Export[
		PackageLocalObject[name],
		e
		];


(* ::Subsubsection::Closed:: *)
(*PackageLocalEncode*)


PackageLocalEncode[name_]:=
	(
		Put[
			ReplacePart[Get@PackageLocalFile[name,"object.wl"],
				"ExternalData"->"encoded.mx"
				],
			PackageLocalFile[name,"object.wl"]
			];
		Encode[
			PackageLocalFile[name],
			PackageLocalFile[name,"encoded.mx"]
			];
		PackageLocalObject[name]
		);


PackageLocalEncode[name_,key_]:=
	(
		Put[
			ReplacePart[Get@PackageLocalFile[name,"object.wl"],
				"ExternalData"->"encoded.mx"
				],
			PackageLocalFile[name,"object.wl"]
			];
		Encode[
			PackageLocalFile[name],
			PackageLocalFile[name,"encoded.mx"],
			key
			];
		PackageLocalObject[name]
		);


(* ::Subsubsection::Closed:: *)
(*PackageLocalGet*)


PackageLocalGet[name_]:=
	Get@PackageLocalObject[name];


PackageLocalGet[name_,key_]:=
	Get[PackageLocalObject[name],key];


(* ::Subsubsection::Closed:: *)
(*PackageLocalImport*)


PackageLocalImport[name_,e___]:=
	Import[
		PackageLocalObject[name],
		e
		];


(* ::Subsection::Closed:: *)
(* End[] *)


End[];


(* ::Section:: *)
(* Load *)


(* ::Subsubsection::Closed:: *)
(*Basic Load*)


`Private`Package`$loadAbort=False;
CheckAbort[
	`Private`Package`PackageFEHiddenBlock[
		`Private`Package`PackageAppLoad[]
		],
	`Private`Package`$loadAbort=True;
	EndPackage[]
	];
Protect["`Private`Package`*"];
Unprotect[`Private`Package`$loadAbort];


(* ::Subsubsection::Closed:: *)
(*Exposed Packages*)


Unprotect[
	`Private`Package`$PackagePreloadedPackages,
	`Private`Package`$PackageHiddenPackages,
	`Private`Package`$PackageHiddenContexts
	];
If[(Clear@`Private`Package`$loadAbort;!#)&@`Private`Package`$loadAbort,
	If[$Notebooks,
		If[FileExistsQ@`Private`Package`PackageFilePath["LoadInfo.m"],
			Replace[
				Quiet[
					Import@`Private`Package`PackageFilePath["LoadInfo.m"],
					Import::nffil
					],
				`Private`Package`specs:{__Rule}|_Association:>
					CompoundExpression[
						`Private`Package`$PackagePreloadedPackages=
							Replace[
								Lookup[`Private`Package`specs,"PreLoad"],
								Except[{__String}]->{}
								],
						`Private`Package`$PackageHiddenPackages=
							Replace[
								Lookup[`Private`Package`specs,"Hidden"],
								Except[{__String}]->{}
								],
						`Private`Package`$PackageHiddenContexts=
							Replace[
								Lookup[`Private`Package`specs,"PreLoad"],
								Except[{__String}]->{}
								],
						`Private`Package`PackageAppGet/@
							`Private`Package`$PackagePreloadedPackages;
						If[
							!MemberQ[`Private`Package`$PackageHiddenPackages,
								Replace[
									FileNameSplit@
										FileNameDrop[#,
											FileNameDepth@
												`Private`Package`PackageFilePath["Packages"]
											],{
									{`Private`Package`f_}:>{
										StringTrim[`Private`Package`f,".m"|".wl"]}|
										StringTrim[`Private`Package`f,".m"|".wl"],
									{`Private`Package`p__,`Private`Package`f_}:>
										{`Private`Package`p,
											StringTrim[`Private`Package`f,".m"|".wl"]}
									}]
								],
							`Private`Package`PackageFEUnhidePackage@#
							]&/@Keys@`Private`Package`$DeclaredPackages
						]
				],
			`Private`Package`PackageFEUnhidePackage/@
				Keys@`Private`Package`$DeclaredPackages
			];
		];
	EndPackage[];
	];


(* ::Subsubsection::Closed:: *)
(*Rehide Packages*)


If[
MemberQ[ObjectFramework`Private`Package`$PackageHiddenPackages,
		Replace[
			FileNameSplit@
				FileNameDrop[#,
					FileNameDepth@
						ObjectFramework`Private`Package`PackageFilePath["Packages"]
					],{
			{ObjectFramework`Private`Package`f_}:>{
				StringTrim[ObjectFramework`Private`Package`f,".m"|".wl"]}|
				StringTrim[ObjectFramework`Private`Package`f,".m"|".wl"],
			{ObjectFramework`Private`Package`p__,ObjectFramework`Private`Package`f_}:>
				{ObjectFramework`Private`Package`p,
					StringTrim[ObjectFramework`Private`Package`f,".m"|".wl"]}
			}]
		],
	ObjectFramework`Private`Package`PackageFERehidePackage@#
	]&/@Keys@ObjectFramework`Private`Package`$DeclaredPackages


(* ::Subsubsection::Closed:: *)
(*Exposed Contexts*)


$ContextPath=
	Join[
		DeleteCases[
			Alternatives@@
				Join[
					Replace[
						Flatten@{ObjectFramework`Private`Package`$HiddenContexts},
						Except[_String?(StringEndsQ["`"])]->Nothing,
						1
						],
					$ContextPath
					]
				]@
				Select[
					ObjectFramework`Private`Package`$PackageContexts,
					Not@*StringContainsQ["Private"]
					],
		$ContextPath
		];
FrontEnd`Private`GetUpdatedSymbolContexts[];